{"version":3,"file":"static/js/38.8eae4fea.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/profile/Profile.module.css?5246","webpack://samurai-way/./src/components/profile/profileInfo/ProfileInfo.module.css?df08","components/profile/profileStatus/ProfileStatusWithHooks.tsx","components/profile/profileInfo/contacts/Contacts.tsx","webpack://samurai-way/./src/components/profile/profileInfo/profileData/ProfileData.module.css?5b9f","components/profile/profileInfo/profileData/ProfileData.tsx","webpack://samurai-way/./src/components/profile/profileInfo/profileData/ProfileDataForm.module.css?eb69","components/profile/profileInfo/profileData/ProfileDataForm.tsx","components/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/myPosts/MyPosts.module.css?000b","webpack://samurai-way/./src/components/profile/myPosts/post/Post.module.css?fa80","components/profile/myPosts/post/Post.tsx","components/profile/myPosts/PostForm.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/profile/withRouter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__DykmE\"};","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ProfileInfo_info__KDdPV\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__5qaD8\",\"changeAvatar\":\"ProfileInfo_changeAvatar__Zpx8Y\",\"status\":\"ProfileInfo_status__cYhuP\",\"noStatus\":\"ProfileInfo_noStatus__uhond\",\"modal\":\"ProfileInfo_modal__0mBfN\",\"modalContent\":\"ProfileInfo_modalContent__86IY7\",\"closeModalBtn\":\"ProfileInfo_closeModalBtn__8+w7w\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from '../profileInfo/ProfileInfo.module.css';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n    owner: boolean\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> =(props)=> {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const onDoubleClick =()=> {\r\n        if (props.owner) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const onBlur =()=> {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange =(e: ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n        return <>\r\n            <div>\r\n                {!editMode && <span className={props.status ? s.status : s.noStatus} onDoubleClick={onDoubleClick}>\r\n                    {(props.status && props.owner) ? props.status : (!props.status && props.owner) ? \"How you doing?\" : \"\"}\r\n                </span>}\r\n            </div>\r\n            <div>\r\n                {editMode && <input className={s.status} onChange={onStatusChange} autoFocus={true} onBlur={onBlur} value={status}/>}\r\n            </div>\r\n        </>\r\n}","import React from 'react';\r\n\r\nexport type ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | undefined\r\n}\r\n\r\nexport const Contacts = (props: ContactsPropsType) => {\r\n    return (\r\n        (props.contactValue ?\r\n                <div>\r\n                    <b>{props.contactTitle}: </b>\r\n                    {props.contactValue}\r\n                </div>\r\n            : null)\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"edit\":\"ProfileData_edit__-EDqJ\",\"profileData\":\"ProfileData_profileData__UqhRo\"};","import React from 'react';\r\nimport {Contacts} from '../contacts/Contacts';\r\nimport {ProfileType} from '../../../../redux/profile-reducer';\r\nimport s from './ProfileData.module.css'\r\nimport {Icon} from '../../../../assets/images/Icon';\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    owner: boolean\r\n    goToEditMode: ()=>void\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <>\r\n            {props.owner &&\r\n                <div className={s.edit}>\r\n                    <button onClick={props.goToEditMode}><Icon iconId={'edit'} width={'35'} height={'35'}/></button>\r\n                </div>}\r\n            <div className={s.profileData}>\r\n                <h3>Info</h3>\r\n                <p><b>About me: </b>{props.profile.aboutMe}</p>\r\n                <p><b>Looking for a job: </b>{props.profile.lookingForAJob ? '✔️' : '❌'}</p>\r\n                <p><b>My professional skills: </b>{props.profile.lookingForAJobDescription}</p>\r\n                { Object.values(props.profile.contacts).filter(el => el !== '' && el !== null).length > 0 && <h3>Contacts:</h3>}\r\n                { Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contacts\r\n                        key={key}\r\n                        contactTitle={key}\r\n                        contactValue={props.profile?.contacts[key as keyof typeof props.profile.contacts]}/>\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"fieldError\":\"ProfileDataForm_fieldError__SASL-\",\"error\":\"ProfileDataForm_error__TM2SS\",\"profileForm\":\"ProfileDataForm_profileForm__dUKr+\"};","import React from 'react';\r\nimport s from './ProfileDataForm.module.css';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {ContactsType, ProfileType} from '../../../../redux/profile-reducer';\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    exitFromEditMode: (profileData: ProfileFormType) => void\r\n}\r\n\r\nconst requiredFieldValidate = (value: string) => {\r\n    if (!value) {\r\n        return 'This field is required'\r\n    }\r\n}\r\n\r\nconst contactsValidate = (value: string) => {\r\n    if (!value) {\r\n        return\r\n    }\r\n    const regex = /\\./\r\n    if (!regex.test(value)) {\r\n       return 'Enter correct URL';\r\n    }\r\n}\r\n\r\n\r\nexport type ProfileFormType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: ContactsType\r\n}\r\n\r\nexport const ProfileDataForm = (props: ProfileDataFormPropsType) => {\r\n    const submit = (values: ProfileFormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const profileData: ProfileFormType = {\r\n            fullName: values.fullName,\r\n            aboutMe: values.aboutMe,\r\n            lookingForAJob: values.lookingForAJob,\r\n            lookingForAJobDescription: values.lookingForAJobDescription,\r\n            contacts: {\r\n                facebook: values.contacts.facebook,\r\n                website: values.contacts.website,\r\n                vk: values.contacts.vk,\r\n                twitter: values.contacts.twitter,\r\n                instagram: values.contacts.instagram,\r\n                youtube: values.contacts.youtube,\r\n                github: values.contacts.github,\r\n                mainLink: values.contacts.mainLink\r\n            }\r\n        }\r\n        setSubmitting(false)\r\n        props.exitFromEditMode(profileData)\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={props.profile}\r\n                onSubmit={submit}\r\n            >\r\n                {({\r\n                      values,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                      errors\r\n                  }) => (\r\n                    <Form onSubmit={handleSubmit} className={s.profileForm}>\r\n                        <label>\r\n                        Full name <Field\r\n                            type=\"text\"\r\n                            name=\"fullName\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.fullName}\r\n                            className={errors.fullName ? errors.fullName && s.fieldError : ''}\r\n                            validate={requiredFieldValidate}\r\n                        /></label>\r\n                        <label>\r\n                        About me <Field\r\n                            type=\"text\"\r\n                            name=\"aboutMe\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.aboutMe}\r\n                            className={errors.aboutMe ? errors.aboutMe && s.fieldError : ''}\r\n                            validate={requiredFieldValidate}\r\n                        /></label>\r\n                        <label>\r\n                            Looking for a job <Field\r\n                            type=\"checkbox\"\r\n                            name=\"lookingForAJob\"\r\n                            checked={values.lookingForAJob}\r\n                        />\r\n                        </label>\r\n                        <label>My professional skills <Field\r\n                            type=\"text\"\r\n                            name=\"lookingForAJobDescription\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.lookingForAJobDescription}\r\n                            validate={requiredFieldValidate}\r\n                            className={errors.lookingForAJobDescription ? errors.lookingForAJobDescription && s.fieldError : ''}\r\n                        /></label>\r\n                        {Object.keys(props.profile.contacts).map(key => {\r\n                            return <label>{`${key}`} <Field\r\n                                    key={key}\r\n                                    type=\"text\"\r\n                                    name={`contacts.${key}`}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.contacts[key as keyof typeof props.profile.contacts]}\r\n                                    validate={contactsValidate}\r\n                                    className={errors.contacts ? errors.contacts[key as keyof typeof props.profile.contacts] && s.fieldError : ''}\r\n                                /></label>\r\n                        })}\r\n                       {errors.contacts && <div className={s.error}>Enter correct URL</div>}\r\n                        {(errors.lookingForAJobDescription || errors.aboutMe || errors.fullName)\r\n                            && <div className={s.error}>This field is required</div>}\r\n                        <div>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader';\r\nimport {ProfileStatusWithHooks} from '../profileStatus/ProfileStatusWithHooks';\r\nimport img from '../../../assets/images/noavatar.jpg'\r\nimport {ProfileData} from './profileData/ProfileData';\r\nimport {ProfileDataForm, ProfileFormType} from './profileData/ProfileDataForm';\r\nimport {UserType} from '../../../redux/users-reducer';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    authId: string | null\r\n    savePhoto: (image: any) => void\r\n    saveProfile: (profileData: ProfileFormType) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [showingModal, setShowingModal] = useState(false)\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            props.savePhoto(e.currentTarget.files[0])\r\n            setShowingModal(false)\r\n        }\r\n    }\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const exitFromEditMode = (profileData: ProfileFormType) => {\r\n        props.saveProfile(profileData)\r\n        setEditMode(false)\r\n    }\r\n    const showModal = () => {\r\n        setShowingModal(true)\r\n    }\r\n    const hideModal = () => {\r\n        setShowingModal(false)\r\n    }\r\n    return (!props.profile) ? <Preloader/> :\r\n        (<div className={s.info}>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.changeAvatar}>\r\n                    <img src={props.profile?.photos.large ? props.profile?.photos.large : img} alt={'Profile'}/>\r\n                    {props.profile.userId === props.authId && <button onClick={showModal}>Change photo</button>}\r\n                    {props.profile.userId === props.authId &&\r\n                        <div>\r\n                            {showingModal && <div className={s.modal}>\r\n                                <div className={s.modalContent}>\r\n                                    <button onClick={hideModal} className={s.closeModalBtn}><b>X</b></button>\r\n                                    <p>You can load photo from your computer:</p>\r\n                                    <input type={'file'} accept=\".jpg, .png\" onChange={onMainPhotoSelected}/>\r\n                                </div>\r\n                            </div>}\r\n                        </div>}\r\n                </div>\r\n                <div>\r\n                    <h2>{props.profile.fullName}</h2>\r\n                    <ProfileStatusWithHooks\r\n                        status={props.status}\r\n                        updateStatus={props.updateStatus}\r\n                        owner={props.profile.userId === props.authId}\r\n                    />\r\n                    <hr/>\r\n                    {editMode ? <ProfileDataForm\r\n                            exitFromEditMode={exitFromEditMode}\r\n                            profile={props.profile}\r\n                        />\r\n                        : <ProfileData\r\n                            profile={props.profile}\r\n                            owner={props.profile.userId === props.authId}\r\n                            goToEditMode={goToEditMode}\r\n                        />}\r\n                </div>\r\n            </div>\r\n        </div>)\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__PJLR3\",\"field\":\"MyPosts_field__-V4Eg\",\"buttonPost\":\"MyPosts_buttonPost__mxBsm\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__5qFIu\",\"optionsBtn\":\"Post_optionsBtn__8-4g2\",\"postText\":\"Post_postText__e43oC\"};","import React, {useState} from 'react';\r\nimport s from './Post.module.css';\r\nimport photo from '../../../../assets/images/noavatar.jpg'\r\nimport {Icon} from '../../../../assets/images/Icon';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    photo: string | undefined\r\n    owner: boolean\r\n    userName: string | undefined\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    const [likes, setLikes] = useState(0)\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.optionsBtn}>\r\n                <button><Icon iconId={'options'} height={'50'} width={'50'}/></button>\r\n            </div>\r\n            <div>\r\n                <img src={props.photo ? props.photo : photo} alt={'avatar'}/>\r\n                <span><b>{props.userName}</b></span>\r\n            </div>\r\n            <div className={s.postText}>{props.message}</div>\r\n            <div className={s.btn}>\r\n                <button onClick={() => setLikes(likes + 1)}>❤️ {likes} </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Field, Formik, FormikHelpers} from 'formik';\r\nimport s from './MyPosts.module.css'\r\n\r\ntype PostFormPropsType = {\r\n    sendPost: (message: string) => void\r\n}\r\n\r\ntype PostFormType = {\r\n    newPost: string\r\n}\r\n\r\nconst postValidate = (post: string)=> {\r\n    let error\r\n    if (!post) {\r\n        error = 'Text required';\r\n    } else if (post.length > 100) {\r\n        error = 'Post is too large';\r\n    }\r\n    return error\r\n}\r\n\r\nexport const PostForm = (props: PostFormPropsType) => {\r\n    const submit = (values: PostFormType, actions: FormikHelpers<PostFormType>) => {\r\n        const post: PostFormType = {\r\n            newPost: values.newPost\r\n        }\r\n        props.sendPost(post.newPost)\r\n        actions.resetForm();\r\n        actions.setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{newPost: ''}}\r\n            onSubmit={submit}\r\n        >\r\n            {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  errors\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"newPost\"\r\n                        placeholder={'Your news...'}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.newPost}\r\n                        className={s.field}\r\n                        validate={postValidate}\r\n                    />\r\n                    {errors.newPost === \"Post is too large\" && <div>{errors.newPost}</div>}\r\n                    <div className={s.buttonPost}>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Add Post\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {PostForm} from './PostForm';\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    const postsElements =\r\n        props.posts.map(p => <Post key={p.id}\r\n                                   message={p.message}\r\n                                   photo={props.photo}\r\n                                   owner={props.owner}\r\n                                   userName={props.userName}/>)\r\n    return (\r\n        props.owner ?\r\n            <div className={s.postsBlock}>\r\n                <h3>My Posts</h3>\r\n                <PostForm sendPost={props.addPost}/>\r\n                <div>\r\n                    {postsElements}\r\n                </div>\r\n            </div> :\r\n            null\r\n    );\r\n})","import {addPostActionCreator, PostPropsType} from '../../../redux/profile-reducer';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {MyPosts} from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostPropsType[]\r\n    photo: string | undefined\r\n    owner: boolean\r\n    userName: string | undefined\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (post: string)=> void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        photo: state.profilePage.profile?.photos.small,\r\n        owner: state.profilePage.profile?.userId === state.auth.data.id,\r\n        userName: state.profilePage.profile?.fullName,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (post: string)=> {\r\n            dispatch(addPostActionCreator(post))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './profileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './myPosts/MyPostsContainer';\r\nimport {ProfileAPIPropsType} from './ProfileContainer';\r\n\r\nexport const Profile = (props: ProfileAPIPropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateUsersStatusThunkCreator}\r\n                authId={props.authId}\r\n                savePhoto={props.savePhotoThunkCreator}\r\n                saveProfile={props.saveProfileThunkCreator}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    addPostActionCreator as addPost,\r\n    getUsersProfileThunkCreator,\r\n    getUsersStatusThunkCreator,\r\n    ProfileType,\r\n    savePhotoThunkCreator,\r\n    saveProfileThunkCreator,\r\n    updateUsersStatusThunkCreator\r\n} from '../../redux/profile-reducer';\r\nimport {withRouter, WithRouterProps} from './withRouter';\r\nimport {withAuthRedirectComponent} from '../../hoc/withAuthRedirectComponent';\r\nimport {compose} from 'redux';\r\nimport {ProfileFormType} from './profileInfo/profileData/ProfileDataForm';\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authId: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: ()=> void\r\n    changeNewPostText: (text: string)=> void\r\n    getUsersProfileThunkCreator: (userId: string)=> void\r\n    getUsersStatusThunkCreator: (userId: string)=> void\r\n    updateUsersStatusThunkCreator: (status: string)=> void\r\n    savePhotoThunkCreator: (image: any)=> void\r\n    saveProfileThunkCreator: (profileData: ProfileFormType)=> void\r\n}\r\n\r\nexport type ProfileAPIPropsType = MapStatePropsType & MapDispatchPropsType & WithRouterProps\r\n\r\nclass ProfileContainer extends React.Component<ProfileAPIPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.params.userId\r\n        this.props.getUsersProfileThunkCreator(userId)\r\n        this.props.getUsersStatusThunkCreator(userId)\r\n    }\r\n    render() {\r\n        return <>\r\n            <Profile {...this.props} />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authId: state.auth.data.id,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        addPost,\r\n        getUsersProfileThunkCreator,\r\n        getUsersStatusThunkCreator,\r\n        updateUsersStatusThunkCreator,\r\n        savePhotoThunkCreator,\r\n        saveProfileThunkCreator,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n)(ProfileContainer)","import {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nexport interface WithRouterProps {\r\n    location: ReturnType<typeof useLocation>;\r\n    params: Record<string, string>;\r\n    navigate: ReturnType<typeof useNavigate>;\r\n}\r\n\r\nexport const withRouter = <Props extends WithRouterProps>(\r\n    Component: React.ComponentType<Props>) => {\r\n    return (props: Omit<Props, keyof WithRouterProps>) => {\r\n        const location = useLocation();\r\n        const navigate = useNavigate();\r\n        const params = useParams();\r\n        return (\r\n            <Component\r\n                {...(props as Props)}\r\n                location={location}\r\n                params={params}\r\n                navigate={navigate}\r\n            />\r\n        );\r\n    }\r\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","owner","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","Contacts","contactValue","contactTitle","ProfileData","onClick","goToEditMode","Icon","iconId","width","height","profile","aboutMe","lookingForAJob","lookingForAJobDescription","Object","values","contacts","filter","el","length","keys","map","key","requiredFieldValidate","contactsValidate","test","ProfileDataForm","initialValues","onSubmit","setSubmitting","profileData","fullName","facebook","website","vk","twitter","instagram","youtube","github","mainLink","exitFromEditMode","handleChange","handleBlur","handleSubmit","isSubmitting","errors","type","name","validate","checked","disabled","ProfileInfo","showingModal","setShowingModal","src","photos","large","img","alt","userId","authId","accept","files","savePhoto","saveProfile","Preloader","Post","likes","setLikes","photo","userName","message","postValidate","post","error","PostForm","newPost","actions","sendPost","resetForm","placeholder","MyPosts","React","postsElements","posts","p","id","addPost","MyPostsContainer","connect","state","profilePage","small","auth","data","dispatch","addPostActionCreator","Profile","updateUsersStatusThunkCreator","savePhotoThunkCreator","saveProfileThunkCreator","ProfileContainer","this","params","getUsersProfileThunkCreator","getUsersStatusThunkCreator","compose","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirectComponent"],"sourceRoot":""}