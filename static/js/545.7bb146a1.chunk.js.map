{"version":3,"file":"static/js/545.7bb146a1.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA2G,0BAA3G,EAA+I,yBAA/I,EAAmL,0BAAnL,EAAqN,uBCArN,GAAgB,KAAO,0B,mBCQVA,EAA2C,SAACC,GAErD,IAAMC,EAAI,UAAMD,EAAME,IAEtB,OACI,gBAAKC,UAAWC,EAAAA,KAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAME,UAAWC,EAAAA,OAA9B,SAAyCJ,EAAMM,UCd3D,EAA0B,yBCMbC,EAAqC,SAACP,GAC/C,OACI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMQ,W,oBCGpCC,EAAqB,SAACC,GAExB,MADe,IAIbC,EAAkB,SAACH,GACrB,IAAII,EAMJ,OALKJ,EAEMA,EAAQK,OAAS,MACxBD,EAAQ,wBAFRA,EAAQ,mBAILA,GAGEE,EAAa,SAACd,GASvB,OACI,SAAC,KAAD,CACIe,cAAe,CAACC,eAAgB,IAChCC,SAAUR,EACVS,SAZM,SAACR,EAAwBS,GACnC,IAAMX,EAA0B,CAC5BQ,eAAgBN,EAAOM,gBAE3BhB,EAAMoB,YAAYZ,EAAQQ,gBAC1BG,EAAQE,YACRF,EAAQG,eAAc,IAGtB,SAKK,gBACKZ,EADL,EACKA,OACAa,EAFL,EAEKA,aACAC,EAHL,EAGKA,WACAC,EAJL,EAIKA,aACAC,EALL,EAKKA,aACAC,EANL,EAMKA,OANL,OAQG,kBAAMT,SAAUO,EAActB,UAAWC,EAAzC,WACI,SAAC,KAAD,CACIwB,KAAK,OACLtB,KAAK,iBACLuB,YAAa,oBACbC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOtB,EAAOM,eACdb,UAAWC,EACXa,SAAUN,IAEa,yBAA1BgB,EAAOX,iBAA6C,yBAAMW,EAAOX,kBAClE,mBAAQY,KAAK,SAASK,SAAUP,EAAhC,iC,8BC5BpB,GAAeQ,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACC,GACxB,MAAO,CACHlB,YAAa,SAACZ,GACV8B,GAASC,EAAAA,EAAAA,GAAyB/B,SAO1CgC,EAAAA,EAFJ,EC1BuB,SAACxC,GACpB,IAAMyC,EAAkBzC,EAAMqC,YAAYK,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC7C,EAAD,CAAuBO,KAAMsC,EAAEtC,KAAMJ,GAAI0C,EAAE1C,IAA1B0C,EAAE1C,OACxE2C,EAAmB7C,EAAMqC,YAAYS,SAASH,KAAI,SAAAI,GAAC,OAAI,SAACxC,EAAD,CAAoBC,QAASuC,EAAEvC,SAAjBuC,EAAE7C,OAE7E,OACI,gBAAKC,UAAWC,EAAhB,UACI,UAAC,KAAD,YACI,SAAC,KAAD,CAAOH,KAAM,GAAI+C,SAAS,gBAAK7C,UAAWC,EAAhB,SACrBqC,OAEL,SAAC,KAAD,CAAOxC,KAAM,KAAM+C,SAAS,iBAAK7C,UAAWC,EAAhB,WACxB,mBAAQD,UAAWC,EAAnB,UACI,SAAC,KAAD,CAASC,GAAI,WAAb,qBAEJ,yBAAMwC,KACN,SAAC/B,EAAD,CAAYM,YAAapB,EAAMoB","sources":["webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","webpack://samurai-way/./src/components/dialogs/dialogItem/DialogItem.module.css?807d","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.module.css","components/dialogs/message/Message.tsx","components/dialogs/DialogForm.tsx","components/dialogs/DialogsContainer.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__D6ITN\",\"dialogsItems\":\"Dialogs_dialogsItems__vi0aE\",\"messages\":\"Dialogs_messages__TMPGG\",\"backBtn\":\"Dialogs_backBtn__Vr9rf\",\"sendForm\":\"Dialogs_sendForm__d1Smt\",\"field\":\"Dialogs_field__zRC7J\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__ItviF\"};","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem:React.FC<DialogItemPropsType> = (props) => {\r\n\r\n    const path = `${props.id}`\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <NavLink to={path} className={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__vWHhs\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message:React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Field, Formik, FormikHelpers} from 'formik';\r\n\r\ntype DialogFormPropsType = {\r\n    sendMessage: (message: string)=> void\r\n}\r\n\r\ntype DialogFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst dialogFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\nconst messageValidate = (message: string)=> {\r\n    let error\r\n    if (!message) {\r\n        error = 'Message required';\r\n    } else if (message.length > 100) {\r\n        error = 'Message is too large';\r\n    }\r\n    return error\r\n}\r\n\r\nexport const DialogForm = (props: DialogFormPropsType) => {\r\n    const submit =(values: DialogFormType, actions: FormikHelpers<DialogFormType>) => {\r\n        const message: DialogFormType = {\r\n            newMessageBody: values.newMessageBody\r\n        }\r\n        props.sendMessage(message.newMessageBody)\r\n        actions.resetForm();\r\n        actions.setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{newMessageBody: ''}}\r\n            validate={dialogFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  errors\r\n              }) => (\r\n                <form onSubmit={handleSubmit} className={s.sendForm}>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"newMessageBody\"\r\n                        placeholder={\"Write new message\"}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.newMessageBody}\r\n                        className={s.field}\r\n                        validate={messageValidate}\r\n                    />\r\n                    {errors.newMessageBody === \"Message is too large\" && <div>{errors.newMessageBody}</div>}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};","import {\r\n    dialogPropsType,\r\n    sendMessageActionCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirectComponent} from '../../hoc/withAuthRedirectComponent';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: dialogPropsType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (message: string)=> void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (message: string)=> {\r\n            dispatch(sendMessageActionCreator(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirectComponent\r\n)(Dialogs)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './dialogItem/DialogItem';\r\nimport {Message} from './message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {NavLink, Route, Routes} from 'react-router-dom';\r\nimport {DialogForm} from './DialogForm';\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <Routes>\r\n                <Route path={''} element={<div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>}/>\r\n                <Route path={'/*'} element={<div className={s.messages}>\r\n                    <button className={s.backBtn}>\r\n                        <NavLink to={'/dialogs'}>Back</NavLink>\r\n                    </button>\r\n                    <div>{messagesElements}</div>\r\n                    <DialogForm sendMessage={props.sendMessage}/>\r\n                </div>}/>\r\n            </Routes>\r\n        </div>\r\n    )\r\n};"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","dialogFormValidate","values","messageValidate","error","length","DialogForm","initialValues","newMessageBody","validate","onSubmit","actions","sendMessage","resetForm","setSubmitting","handleChange","handleBlur","handleSubmit","isSubmitting","errors","type","placeholder","onChange","onBlur","value","disabled","compose","connect","state","dialogsPage","dispatch","sendMessageActionCreator","withAuthRedirectComponent","dialogsElements","dialogs","map","d","messagesElements","messages","m","element"],"sourceRoot":""}