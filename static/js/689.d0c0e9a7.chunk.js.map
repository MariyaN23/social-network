{"version":3,"file":"static/js/689.d0c0e9a7.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/profile/Profile.module.css?5246","webpack://samurai-way/./src/components/profile/profileInfo/ProfileInfo.module.css?df08","components/profile/profileStatus/ProfileStatusWithHooks.tsx","components/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/myPosts/MyPosts.module.css?000b","webpack://samurai-way/./src/components/profile/myPosts/post/Post.module.css?fa80","components/profile/myPosts/post/Post.tsx","components/profile/myPosts/PostForm.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/profile/withRouter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__DykmE\"};","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ProfileInfo_info__KDdPV\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__5qaD8\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n    profileId: string\r\n    authId: string | null\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> =(props)=> {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const onDoubleClick =()=> {\r\n        if (props.profileId === props.authId) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const onBlur =()=> {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange =(e: ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n        return <>\r\n            <div>\r\n                {!editMode && <span onDoubleClick={onDoubleClick}>{props.status || \"-------\"}</span>}\r\n            </div>\r\n            <div>\r\n                {editMode && <input onChange={onStatusChange} autoFocus={true} onBlur={onBlur} value={status}/>}\r\n            </div>\r\n        </>\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader';\r\nimport {ProfileStatusWithHooks} from '../profileStatus/ProfileStatusWithHooks';\r\nimport img from '../../../assets/images/noavatar.jpg'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n    authId: string | null\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    return (!props.profile) ? <Preloader/> :\r\n        (<div className={s.info}>\r\n            {/*<div>\r\n                <img src={wallpaper} alt={'Dubai'}/>\r\n            </div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile?.photos.large ? props.profile?.photos.large : img} alt={'avatar'}/>\r\n                <div>\r\n                    <h2>{props.profile.fullName}</h2>\r\n                    <ProfileStatusWithHooks\r\n                        status={props.status}\r\n                        updateStatus={props.updateStatus}\r\n                        profileId={props.profile.userId}\r\n                        authId={props.authId}\r\n                    />\r\n                    <p>{props.profile.aboutMe}</p>\r\n                    <hr/>\r\n                    <p>Looking for a job: {props.profile.lookingForAJob ? '✔' : '❌'}</p>\r\n                    {props.profile.lookingForAJobDescription && <p>{props.profile.lookingForAJobDescription}</p>}\r\n                    <h2>Contacts:</h2>\r\n                    <h3>{props.profile.contacts.github}</h3>\r\n                    <h3>{props.profile.contacts.vk}</h3>\r\n                    <h3>{props.profile.contacts.facebook}</h3>\r\n                    <h3>{props.profile.contacts.instagram}</h3>\r\n                    <h3>{props.profile.contacts.twitter}</h3>\r\n                    <h3>{props.profile.contacts.website}</h3>\r\n                    <h3>{props.profile.contacts.youtube}</h3>\r\n                    <h3>{props.profile.contacts.mainLink}</h3>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__PJLR3\",\"field\":\"MyPosts_field__-V4Eg\",\"buttonPost\":\"MyPosts_buttonPost__mxBsm\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__5qFIu\",\"btn\":\"Post_btn__XY1R-\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport avatar from '../../../../assets/images/noavatar.jpg'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={avatar} alt={'avatar'}/>\r\n            {props.message}\r\n            <div className={s.btn}>\r\n                <button>❤️ {props.likeCounts} </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Field, Formik, FormikHelpers, FormikState} from 'formik';\r\nimport s from './MyPosts.module.css'\r\nimport {ResetAction} from 'redux-form';\r\n\r\ntype PostFormPropsType = {\r\n    sendPost: (message: string) => void\r\n}\r\n\r\ntype PostFormType = {\r\n    newPost: string\r\n}\r\n\r\nconst postValidate = (post: string)=> {\r\n    let error\r\n    if (!post) {\r\n        error = 'Text required';\r\n    } else if (post.length > 100) {\r\n        error = 'Post is too large';\r\n    }\r\n    return error\r\n}\r\n\r\nexport const PostForm = (props: PostFormPropsType) => {\r\n    const submit = (values: PostFormType, actions: FormikHelpers<PostFormType>) => {\r\n        const post: PostFormType = {\r\n            newPost: values.newPost\r\n        }\r\n        props.sendPost(post.newPost)\r\n        actions.resetForm();\r\n        actions.setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{newPost: ''}}\r\n            onSubmit={submit}\r\n        >\r\n            {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  errors\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"newPost\"\r\n                        placeholder={'Your news...'}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.newPost}\r\n                        className={s.field}\r\n                        validate={postValidate}\r\n                    />\r\n                    {errors.newPost === \"Post is too large\" && <div>{errors.newPost}</div>}\r\n                    <div className={s.buttonPost}>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Add Post\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {PostForm} from './PostForm';\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType)=> {\r\n    const postsElements =\r\n        props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts}/>)\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <PostForm sendPost={props.addPost}/>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})","import {addPostActionCreator, PostPropsType} from '../../../redux/profile-reducer';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {MyPosts} from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostPropsType[]\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (post: string)=> void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (post: string)=> {\r\n            dispatch(addPostActionCreator(post))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './profileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './myPosts/MyPostsContainer';\r\nimport {ProfileAPIPropsType} from './ProfileContainer';\r\n\r\nexport const Profile = (props: ProfileAPIPropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateUsersStatusThunkCreator}\r\n                authId={props.authId}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    addPostActionCreator as addPost,\r\n    getUsersProfileThunkCreator, getUsersStatusThunkCreator,\r\n    ProfileType, updateUsersStatusThunkCreator\r\n} from '../../redux/profile-reducer';\r\nimport {withRouter, WithRouterProps} from './withRouter';\r\nimport {withAuthRedirectComponent} from '../../hoc/withAuthRedirectComponent';\r\nimport {compose} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authId: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: ()=> void\r\n    changeNewPostText: (text: string)=> void\r\n    getUsersProfileThunkCreator: (userId: string)=> void\r\n    getUsersStatusThunkCreator: (userId: string)=> void\r\n    updateUsersStatusThunkCreator: (status: string)=> void\r\n}\r\n\r\nexport type ProfileAPIPropsType = MapStatePropsType & MapDispatchPropsType & WithRouterProps\r\n\r\nclass ProfileContainer extends React.Component<ProfileAPIPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.params.userId\r\n        this.props.getUsersProfileThunkCreator(userId)\r\n        this.props.getUsersStatusThunkCreator(userId)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Profile {...this.props} />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authId: state.auth.data.id\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        addPost,\r\n        getUsersProfileThunkCreator,\r\n        getUsersStatusThunkCreator,\r\n        updateUsersStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n)(ProfileContainer)","import {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nexport interface WithRouterProps {\r\n    location: ReturnType<typeof useLocation>;\r\n    params: Record<string, string>;\r\n    navigate: ReturnType<typeof useNavigate>;\r\n}\r\n\r\nexport const withRouter = <Props extends WithRouterProps>(\r\n    Component: React.ComponentType<Props>) => {\r\n    return (props: Omit<Props, keyof WithRouterProps>) => {\r\n        const location = useLocation();\r\n        const navigate = useNavigate();\r\n        const params = useParams();\r\n        return (\r\n            <Component\r\n                {...(props as Props)}\r\n                location={location}\r\n                params={params}\r\n                navigate={navigate}\r\n            />\r\n        );\r\n    }\r\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","profileId","authId","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","src","photos","large","img","alt","fullName","userId","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","Preloader","Post","avatar","message","likeCounts","postValidate","post","error","length","PostForm","initialValues","newPost","onSubmit","values","actions","sendPost","resetForm","setSubmitting","handleChange","handleBlur","handleSubmit","isSubmitting","errors","type","name","placeholder","validate","disabled","MyPosts","React","postsElements","posts","map","p","id","addPost","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","updateUsersStatusThunkCreator","ProfileContainer","this","params","getUsersProfileThunkCreator","getUsersStatusThunkCreator","compose","auth","data","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirectComponent"],"sourceRoot":""}